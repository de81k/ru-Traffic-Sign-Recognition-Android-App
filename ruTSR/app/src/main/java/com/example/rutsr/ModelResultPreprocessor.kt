package com.example.rutsr

import android.graphics.Rect

class ModelOutput(var classIndex: Int, var score: Float, var box: Rect) : Comparable<ModelOutput> {
    override fun compareTo(other: ModelOutput): Int {
        return score.compareTo(other.score)
    }
}

class ModelResultPreprocessor {
    // The two methods nonMaxSuppression and IOU below are ported from https://github.com/hollance/YOLO-CoreML-MPSNNGraph/blob/master/Common/Helpers.swift
    fun nonMaxSuppression(outputs: ArrayList<ModelOutput>, limit: Int, threshold: Float): ArrayList<ModelOutput> {
        outputs.sort()
        val selected = ArrayList<ModelOutput>()
        val active = BooleanArray(outputs.size) { true }
        var numActive = active.size

        var i = 0
        while (i < outputs.size && selected.size < limit) {
            if (active[i]) {
                val output1 = outputs[i]
                selected.add(output1)
                for (j in i + 1 until outputs.size) {
                    if (active[j]) {
                        val output2 = outputs[j]
                        if (IOU(output1.box, output2.box) > threshold) {
                            active[j] = false
                            numActive--
                            if (numActive <= 0) break
                        }
                    }
                }
            }
            i++
        }
        return selected
    }

    fun IOU(a: Rect, b: Rect): Float {
        val areaA = ((a.right - a.left) * (a.bottom - a.top)).toFloat()
        if (areaA <= 0.0) return 0.0f
        val areaB = ((b.right - b.left) * (b.bottom - b.top)).toFloat()
        if (areaB <= 0.0) return 0.0f
        val intersectionMinX = Math.max(a.left, b.left).toFloat()
        val intersectionMinY = Math.max(a.top, b.top).toFloat()
        val intersectionMaxX = Math.min(a.right, b.right).toFloat()
        val intersectionMaxY = Math.min(a.bottom, b.bottom).toFloat()
        val intersectionArea = Math.max(intersectionMaxY - intersectionMinY, 0f) *
                Math.max(intersectionMaxX - intersectionMinX, 0f)
        return intersectionArea / (areaA + areaB - intersectionArea)
    }

    fun outputsToPredictions(
        outputs: FloatArray,
        imgScaleX: Float,
        imgScaleY: Float
    ): ArrayList<ModelOutput> {
        val results = ArrayList<ModelOutput>()
        for (i in 0 until numRows) {
            if (outputs[i * numColumns + 4] > threshold) {
                val x = outputs[i * numColumns]
                val y = outputs[i * numColumns + 1]
                val w = outputs[i * numColumns + 2]
                val h = outputs[i * numColumns + 3]
                var max = outputs[i * numColumns + 5]
                var cls = 0
                for (j in 0 until numColumns - 5) {
                    if (outputs[i * numColumns + 5 + j] > max) {
                        max = outputs[i * numColumns + 5 + j]
                        cls = j
                    }
                }

                val left = (imgScaleX * (x - w / 2)).toInt()
                val top = (imgScaleY * (y - h / 2)).toInt()
                val right = (imgScaleX * (x + w / 2)).toInt()
                val bottom = (imgScaleY * (y + h / 2)).toInt()
                val rect = Rect(left, top, right, bottom)
                val modelOutput = ModelOutput(cls, outputs[i * numColumns + 4], rect)
                results.add(modelOutput)
            }
        }
        return nonMaxSuppression(results, numPredsLimit, threshold)
    }

    companion object {
        val classNames = arrayOf("Железнодорожный переезд со шлагбаумом", "Железнодорожный переезд без шлагбаума", "Пересечение с трамвайной линией", "Пересечение равнозначных дорог", "Пересечение с круговым движением", "Светофорное регулирование", "Выезд на набережную", "Опасный поворот (налево)", "Опасный поворот (направо)", "Опасные повороты (налево)", "Опасные повороты (направо)", "Крутой спуск", "Крутой подъём", "Скользкая дорога", "Неровная дорога", "Искусственная неровность", "Выброс гравия", "Опасная обочина", "Сужение дороги (справа)", "Сужение дороги", "Сужение дороги (слева)", "Двустороннее движение", "Пешеходный переход", "Дети", "Дорожные работы", "Перегон скота", "Дикие животные", "Низколетящие самолёты", "Тоннель", "Уступите дорогу", "Прочие опасности", "Главная дорога", "Конец главной дороги", "Пересечение со второстепенной дорогой", "Примыкание второстепенной дороги (слева сверху)", "Примыкание второстепенной дороги", "Примыкание второстепенной дороги (справа снизу)", "Примыкание второстепенной дороги (справа сверху)", "Примыкание второстепенной дороги (слева снизу)", "Движение без остановки запрещено", "Преимущество встречного движения", "Преимущество перед встречным движением", "Въезд запрещён", "Движение запрещено", "Движение грузовых автомобилей запрещено (2.5)", "Движение грузовых автомобилей запрещено (3.5)", "Движение грузовых автомобилей запрещено (8)", "Движение грузовых автомобилей запрещено (5)", "Движение тракторов запрещено", "Движение пешеходов запрещено", "Ограничение массы (23)", "Ограничение массы (13)", "Ограничение массы (5)", "Ограничение массы (20)", "Ограничение массы, приходящейся на ось транспортного средства (9)", "Ограничение массы (8)", "Ограничение массы (17)", "Ограничение массы, приходящейся на ось транспортного средства (10)", "Ограничение массы, приходящейся на ось транспортного средства (3)", "Ограничение массы, приходящейся на ось транспортного средства (6)", "Ограничение массы, приходящейся на ось транспортного средства (5)", "Ограничение высоты (4.5)", "Ограничение высоты (3.5)", "Ограничение высоты (4.3)", "Ограничение высоты (2.6)", "Ограничение высоты (4.1)", "Ограничение высоты (3)", "Ограничение ширины (3.5)", "Ограничение ширины (2.7)", "Ограничение ширины (3)", "Ограничение ширины (3.7)", "Ограничение минимальной дистанции (3)", "Ограничение минимальной дистанции (1)", "Поворот направо запрещён", "Поворот налево запрещён", "Разворот запрещён", "Обгон запрещён", "Конец зоны запрещения обгона", "Ограничение максимальной скорости (40)", "Ограничение максимальной скорости (50)", "Ограничение максимальной скорости (30)", "Ограничение максимальной скорости (70)", "Ограничение максимальной скорости (5)", "Ограничение максимальной скорости (20)", "Ограничение максимальной скорости (80)", "Ограничение максимальной скорости (10)", "Ограничение максимальной скорости (60)", "Конец зоны ограничения максимальной скорости (50)", "Конец зоны ограничения максимальной скорости (20)", "Конец зоны ограничения максимальной скорости (40)", "Конец зоны ограничения максимальной скорости (70)", "Остановка запрещена", "Стоянка запрещена", "Стоянка запрещена по нечётным числам месяца.", "Стоянка запрещена по чётным числам месяца", "Конец зоны всех ограничений", "Движение транспортных средств с опасными грузами запрещено", "Движение транспортных средств с взрывчатыми и легковоспламеняющимися грузами запрещено", "Движение направо", "Движение прямо", "Движение прямо или налево", "Движение прямо или направо", "Движение налево", "Движение направо или налево", "Объезд препятствия справа", "Объезд препятствия справа или слева", "Объезд препятствия слева", "Круговое движение", "Пешеходная дорожка", "Направление движения транспортных средств с опасными грузами", "Дорога для автомобилей", "Конец дороги для автомобилей", "Дорога с односторонним движением", "Конец дороги с односторонним движением", "Выезд на дорогу с односторонним движением", "Реверсивное движение", "Дорога с полосой для маршрутных транспортных средств", "Конец дороги с полосой для маршрутных транспортных средств", "Полоса для маршрутных транспортных средств", "Направления движения по полосе", "Начало участка средней полосы трёхполосной дороги", "Конец участка средней полосы трёхполосной дороги", "Начало полосы", "Направления движения по полосам", "Направление движения по полосам ", "Место остановки автобуса и (или) троллейбуса", "Место остановки трамвая", "Место стоянки легковых такси", "Пешеходный переход ", "Искусственная неровность ", "Жилая зона", "Конец жилой зоны", "Рекомендуемая скорость (50)", "Рекомендуемая скорость (20)", "Рекомендуемая скорость (70)", "Рекомендуемая скорость (40)", "Рекомендуемая скорость (60)", "Место для разворота", "Парковка", "Подземный пешеходный переход", "Надземный пешеходный переход", "Тупик", "Тупик (слева)", "Тупик (справа)", "Направление движения для грузовых автомобилей", "Стоп-линия", "Пункт первой медицинской помощи", "Больница", "Автозаправочная станция", "Техническое обслуживание автомобилей", "Мойка автомобилей", "Телефон", "Пункт питания", "Место отдыха", "Пост ДПС", "Пункт транспортного контроля", "Зона приёма радиостанции, передающей информацию о дорожном движении", "Туалет", "Расстояние до объекта", "Указывает расстояние до объекта, находящегося в стороне от дороги.", "Зона действия", "Информирует водителей о нахождении их в зоне действия знаков 3.27—3.30.", "Указывает конец зоны действия знаков 3.27—3.30.", "Указывает зону действия запрещающих знаков 3.27—3.30.", "Направления действия", "Вид транспортного средства", "Рабочие дни", "Время действия", "Способ постановки транспортного средства на стоянку", "Указывают способ постановки легковых автомобилей и мотоциклов на околотротуарной стоянке.", "Платные услуги", "Направление главной дороги", "Полоса движения", "Слепые пешеходы", "Влажное покрытие", "Инвалиды", "Кроме инвалидов", "Фотовидеофиксация")
        val NO_MEAN_RGB = floatArrayOf(0.0f, 0.0f, 0.0f)
        val NO_STD_RGB = floatArrayOf(1.0f, 1.0f, 1.0f)
        const val width = 640
        const val height = 640

        // model output is of size 25200*(num_of_class+5)
        private const val numRows = 25200 // as decided by the YOLOv5 model for input image of size 640*640
        private const val numColumns = 183 // left, top, right, bottom, score and classes probabilities
        private const val threshold = 0.40f // score above which a detection is generated
        private const val numPredsLimit = 10
    }
}